[
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int x = 5;\n    cout << ++x;\n    return 0;\n}",
    "options": {
      "A": "4",
      "B": "5",
      "C": "6",
      "D": "Compilation Error"
    },
    "correct_answer": "C",
    "difficulty": "easy",
    "topic": "Operators"
  },
  {
    "question": "Which of the following is a correct way to define a class in C++?",
    "code": "",
    "options": {
      "A": "class MyClass { int x; }",
      "B": "class MyClass { int x; };",
      "C": "class MyClass(int x) { };",
      "D": "class MyClass { int x }"
    },
    "correct_answer": "B",
    "difficulty": "easy",
    "topic": "Classes and Objects"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nclass Base {\npublic:\n    Base() { cout << \"Base constructor\"; }\n};\nclass Derived : public Base {\npublic:\n    Derived() { cout << \"Derived constructor\"; }\n};\nint main() {\n    Derived d;\n    return 0;\n}",
    "options": {
      "A": "Base constructor",
      "B": "Derived constructor",
      "C": "Base constructorDerived constructor",
      "D": "Derived constructorBase constructor"
    },
    "correct_answer": "C",
    "difficulty": "intermediate",
    "topic": "Inheritance"
  },
  {
    "question": "What is the size of an empty class in C++?",
    "code": "",
    "options": {
      "A": "0 bytes",
      "B": "1 byte",
      "C": "2 bytes",
      "D": "4 bytes"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Classes and Objects"
  },
  {
    "question": "Which of the following is true about the C++ standard template library (STL)?",
    "code": "",
    "options": {
      "A": "STL contains classes for primitive data types only.",
      "B": "STL is a collection of classes and functions.",
      "C": "STL is not part of the C++ standard.",
      "D": "STL can only be used with custom data types."
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Standard Template Library (STL)"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int arr[] = {10, 20, 30};\n    int *ptr = arr;\n    cout << *(ptr + 1);\n    return 0;\n}",
    "options": {
      "A": "10",
      "B": "20",
      "C": "30",
      "D": "Garbage value"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Pointers and Arrays"
  },
  {
    "question": "Which of the following correctly describes the role of a virtual function in C++?",
    "code": "",
    "options": {
      "A": "A function defined in a base class that can be overridden in a derived class.",
      "B": "A function that cannot be overridden in a derived class.",
      "C": "A function that is always static.",
      "D": "A function that does not return a value."
    },
    "correct_answer": "A",
    "difficulty": "hard",
    "topic": "Polymorphism"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nclass A {\npublic:\n    virtual void show() { cout << \"A\"; }\n};\nclass B : public A {\npublic:\n    void show() override { cout << \"B\"; }\n};\nint main() {\n    A *a = new B();\n    a->show();\n    return 0;\n}",
    "options": {
      "A": "A",
      "B": "B",
      "C": "AB",
      "D": "BA"
    },
    "correct_answer": "B",
    "difficulty": "hard",
    "topic": "Polymorphism"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int x = 10;\n    int y = 20;\n    int &ref = x;\n    ref = y;\n    cout << x;\n    return 0;\n}",
    "options": {
      "A": "10",
      "B": "20",
      "C": "0",
      "D": "Compilation Error"
    },
    "correct_answer": "20",
    "difficulty": "intermediate",
    "topic": "References"
  },
  {
    "question": "What is the purpose of the 'mutable' keyword in C++?",
    "code": "",
    "options": {
      "A": "To allow a constant variable to be modified.",
      "B": "To allow a member of an object to be modified even if the object is constant.",
      "C": "To make a variable thread-safe.",
      "D": "To prevent a variable from being modified."
    },
    "correct_answer": "B",
    "difficulty": "hard",
    "topic": "Keywords"
  },
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    for(int i = 0; i < 5; i++) {\n        cout << i << \" \";\n    }\n    return 0;\n}",
    "options": {
      "A": "0 1 2 3 4",
      "B": "1 2 3 4 5",
      "C": "0 1 2 3 4 5",
      "D": "1 2 3 4"
    },
    "correct_answer": "A",
    "difficulty": "easy",
    "topic": "Loops"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int i = 0;\n    while (i < 3) {\n        cout << i << \" \";\n        i++;\n    }\n    return 0;\n}",
    "options": {
      "A": "0 1 2",
      "B": "1 2 3",
      "C": "0 1 2 3",
      "D": "Infinite loop"
    },
    "correct_answer": "A",
    "difficulty": "easy",
    "topic": "Loops"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    for(int i = 0; i < 5; i++) {\n        if (i == 3)\n            break;\n        cout << i << \" \";\n    }\n    return 0;\n}",
    "options": {
      "A": "0 1 2 3",
      "B": "0 1 2",
      "C": "0 1 2 4",
      "D": "0 1 2 3 4"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Loops"
  },
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int sum = 0;\n    for(int i = 1; i <= 5; i++) {\n        sum += i;\n    }\n    cout << sum;\n    return 0;\n}",
    "options": {
      "A": "5",
      "B": "10",
      "C": "15",
      "D": "20"
    },
    "correct_answer": "C",
    "difficulty": "easy",
    "topic": "Loops"
  },
  {
    "question": "Which of the following statements about 'switch' statement in C++ is correct?",
    "code": "",
    "options": {
      "A": "A 'switch' statement can evaluate any type of expression.",
      "B": "A 'switch' statement can only evaluate integer and character expressions.",
      "C": "A 'switch' statement can evaluate boolean expressions.",
      "D": "A 'switch' statement can evaluate floating-point expressions."
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Conditional Statements"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int x = 10;\n    if (x > 5) {\n        cout << \"x is greater than 5\";\n    } else {\n        cout << \"x is less than or equal to 5\";\n    }\n    return 0;\n}",
    "options": {
      "A": "x is greater than 5",
      "B": "x is less than or equal to 5",
      "C": "Compilation Error",
      "D": "No Output"
    },
    "correct_answer": "A",
    "difficulty": "easy",
    "topic": "Conditional Statements"
  },
  {
    "question": "Which of the following loops guarantees to execute at least once?",
    "code": "",
    "options": {
      "A": "for loop",
      "B": "while loop",
      "C": "do-while loop",
      "D": "None of the above"
    },
    "correct_answer": "C",
    "difficulty": "easy",
    "topic": "Loops"
  },
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 2; j++) {\n            cout << i << j << \" \";\n        }\n    }\n    return 0;\n}",
    "options": {
      "A": "00 01 10 11 20 21",
      "B": "00 01 02 10 11 12 20 21 22",
      "C": "00 01 10 11 20 21",
      "D": "00 01 10 11 20 21 30 31"
    },
    "correct_answer": "A",
    "difficulty": "intermediate",
    "topic": "Loops"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int x = 5;\n    if (x == 5) {\n        if (x < 10)\n            cout << \"x is less than 10\";\n    } else {\n        cout << \"x is not 5\";\n    }\n    return 0;\n}",
    "options": {
      "A": "x is less than 10",
      "B": "x is not 5",
      "C": "Compilation Error",
      "D": "No Output"
    },
    "correct_answer": "A",
    "difficulty": "easy",
    "topic": "Conditional Statements"
  },
  {
    "question": "Which of the following is the correct syntax for a 'while' loop?",
    "code": "",
    "options": {
      "A": "while (condition) { // code to be executed }",
      "B": "do { // code to be executed } while (condition);",
      "C": "for (initialization; condition; increment) { // code to be executed }",
      "D": "if (condition) { // code to be executed }"
    },
    "correct_answer": "A",
    "difficulty": "easy",
    "topic": "Loops"
  },
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nvoid printMessage() {\n    cout << \"Hello, World!\";\n}\nint main() {\n    printMessage();\n    return 0;\n}",
    "options": {
      "A": "Hello, World!",
      "B": "Hello, World",
      "C": "Compilation Error",
      "D": "No Output"
    },
    "correct_answer": "A",
    "difficulty": "easy",
    "topic": "Functions"
  },
  {
    "question": "Which of the following is a correct way to open a file for reading in C++?",
    "code": "",
    "options": {
      "A": "ifstream file(\"example.txt\", ios::in);",
      "B": "ifstream file(\"example.txt\", ios::out);",
      "C": "ofstream file(\"example.txt\", ios::in);",
      "D": "fstream file(\"example.txt\", ios::out);"
    },
    "correct_answer": "A",
    "difficulty": "intermediate",
    "topic": "File Handling"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\n#include <stdexcept>\nusing namespace std;\nint main() {\n    try {\n        throw runtime_error(\"An error occurred\");\n    } catch (const runtime_error& e) {\n        cout << e.what();\n    }\n    return 0;\n}",
    "options": {
      "A": "An error occurred",
      "B": "runtime_error",
      "C": "Exception caught",
      "D": "No Output"
    },
    "correct_answer": "A",
    "difficulty": "intermediate",
    "topic": "Exception Handling"
  },
  {
    "question": "What is the purpose of the 'new' operator in C++?",
    "code": "",
    "options": {
      "A": "To create a new variable on the stack",
      "B": "To allocate memory on the heap",
      "C": "To deallocate memory on the heap",
      "D": "To deallocate memory on the stack"
    },
    "correct_answer": "B",
    "difficulty": "easy",
    "topic": "Memory Management"
  },
  {
    "question": "Which of the following correctly describes the role of a destructor in C++?",
    "code": "",
    "options": {
      "A": "A function that initializes an object when it is created.",
      "B": "A function that is called when an object goes out of scope or is explicitly deleted.",
      "C": "A function that copies data from one object to another.",
      "D": "A function that is used to overload operators."
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Destructors"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nvoid func(int &x) {\n    x = 10;\n}\nint main() {\n    int a = 5;\n    func(a);\n    cout << a;\n    return 0;\n}",
    "options": {
      "A": "5",
      "B": "10",
      "C": "Compilation Error",
      "D": "Undefined Behavior"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "References"
  },
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nvoid func() {\n    static int x = 0;\n    x++;\n    cout << x << \" \";\n}\nint main() {\n    for(int i = 0; i < 5; i++) {\n        func();\n    }\n    return 0;\n}",
    "options": {
      "A": "0 0 0 0 0",
      "B": "1 2 3 4 5",
      "C": "1 1 1 1 1",
      "D": "Compilation Error"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Static Variables"
  },
  {
    "question": "Which of the following statements about function overloading in C++ is true?",
    "code": "",
    "options": {
      "A": "Function overloading allows multiple functions with the same name and different return types.",
      "B": "Function overloading allows multiple functions with the same name and same parameter list.",
      "C": "Function overloading allows multiple functions with the same name and different parameter lists.",
      "D": "Function overloading is not supported in C++."
    },
    "correct_answer": "C",
    "difficulty": "intermediate",
    "topic": "Function Overloading"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int arr[3] = {1, 2, 3};\n    cout << arr[1];\n    return 0;\n}",
    "options": {
      "A": "1",
      "B": "2",
      "C": "3",
      "D": "Compilation Error"
    },
    "correct_answer": "B",
    "difficulty": "easy",
    "topic": "Arrays"
  },
  {
    "question": "Which of the following statements about namespaces in C++ is correct?",
    "code": "",
    "options": {
      "A": "Namespaces allow you to create global variables.",
      "B": "Namespaces allow you to group functions, variables, and types under a single name.",
      "C": "Namespaces allow you to use the same name for different functions, variables, or types without conflict.",
      "D": "Namespaces are used to create multi-threaded programs."
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Namespaces"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\ntemplate <typename T>\nT add(T a, T b) {\n    return a + b;\n}\nint main() {\n    cout << add<int>(3, 4) << \" \" << add<double>(3.1, 4.2);\n    return 0;\n}",
    "options": {
      "A": "7 7.3",
      "B": "7 7",
      "C": "7.0 7.3",
      "D": "Compilation Error"
    },
    "correct_answer": "A",
    "difficulty": "intermediate",
    "topic": "Templates"
  },
  {
    "question": "What is a lambda expression in C++?",
    "code": "",
    "options": {
      "A": "A function that is defined using the 'auto' keyword",
      "B": "A function that has no return type",
      "C": "An anonymous function defined by the [ ] syntax",
      "D": "A function that can only be used in classes"
    },
    "correct_answer": "C",
    "difficulty": "intermediate",
    "topic": "Lambda Expressions"
  },
  {
    "question": "Which of the following correctly describes a unique_ptr in C++?",
    "code": "",
    "options": {
      "A": "A smart pointer that can share ownership of a dynamically allocated object",
      "B": "A smart pointer that ensures a single owner of a dynamically allocated object",
      "C": "A smart pointer that does not automatically deallocate the object",
      "D": "A smart pointer that uses reference counting"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Smart Pointers"
  },
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\n#include <thread>\nusing namespace std;\nvoid func() {\n    cout << \"Thread function\";\n}\nint main() {\n    thread t(func);\n    t.join();\n    return 0;\n}",
    "options": {
      "A": "Thread function",
      "B": "Main function",
      "C": "Thread functionMain function",
      "D": "Compilation Error"
    },
    "correct_answer": "A",
    "difficulty": "intermediate",
    "topic": "Multithreading"
  },
  {
    "question": "Which of the following preprocessor directives is used to prevent multiple inclusions of the same header file?",
    "code": "",
    "options": {
      "A": "#include",
      "B": "#define",
      "C": "#ifndef",
      "D": "#pragma once"
    },
    "correct_answer": "D",
    "difficulty": "intermediate",
    "topic": "Preprocessor Directives"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    #ifdef DEBUG\n    cout << \"Debug mode\";\n    #else\n    cout << \"Release mode\";\n    #endif\n    return 0;\n}",
    "options": {
      "A": "Debug mode",
      "B": "Release mode",
      "C": "Compilation Error",
      "D": "No Output"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Preprocessor Directives"
  },
  {
    "question": "What is the role of the 'mutex' in C++ multithreading?",
    "code": "",
    "options": {
      "A": "To split a program into multiple threads",
      "B": "To ensure that a section of code is executed by only one thread at a time",
      "C": "To join multiple threads into one",
      "D": "To manage the lifetime of dynamically allocated objects"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Multithreading"
  },
  {
    "question": "Which of the following is a correct way to declare a lambda expression in C++?",
    "code": "",
    "options": {
      "A": "[]() { return 0; }",
      "B": "auto lambda = []() { return 0; };",
      "C": "[&]() { return 0; }",
      "D": "All of the above"
    },
    "correct_answer": "D",
    "difficulty": "intermediate",
    "topic": "Lambda Expressions"
  },
  {
    "question": "Which of the following correctly describes a shared_ptr in C++?",
    "code": "",
    "options": {
      "A": "A smart pointer that can share ownership of a dynamically allocated object",
      "B": "A smart pointer that ensures a single owner of a dynamically allocated object",
      "C": "A smart pointer that does not automatically deallocate the object",
      "D": "A smart pointer that uses raw pointers"
    },
    "correct_answer": "A",
    "difficulty": "intermediate",
    "topic": "Smart Pointers"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    auto add = [](int a, int b) { return a + b; };\n    cout << add(3, 4);\n    return 0;\n}",
    "options": {
      "A": "3",
      "B": "4",
      "C": "7",
      "D": "Compilation Error"
    },
    "correct_answer": "C",
    "difficulty": "easy",
    "topic": "Lambda Expressions"
  },
  {
    "question": "Which of the following is a correct example of template specialization?",
    "code": "",
    "options": {
      "A": "template <typename T> class MyClass { /* ... */ }; template <> class MyClass<int> { /* ... */ };",
      "B": "template <typename T> class MyClass { /* ... */ }; class MyClass<int> { /* ... */ };",
      "C": "template <typename T> class MyClass { /* ... */ }; template <int> class MyClass { /* ... */ };",
      "D": "template <typename T> class MyClass<int> { /* ... */ };"
    },
    "correct_answer": "A",
    "difficulty": "hard",
    "topic": "Templates"
  },
{
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nclass Base {\npublic:\n    virtual void show() {\n        cout << \"Base class\";\n    }\n};\nclass Derived : public Base {\npublic:\n    void show() override {\n        cout << \"Derived class\";\n    }\n};\nint main() {\n    Base* b = new Derived();\n    b->show();\n    return 0;\n}",
    "options": {
      "A": "Base class",
      "B": "Derived class",
      "C": "Compilation Error",
      "D": "Runtime Error"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Polymorphism"
  },
  {
    "question": "Which of the following statements about inheritance in C++ is correct?",
    "code": "",
    "options": {
      "A": "Inheritance allows a class to be defined based on another class.",
      "B": "Inheritance is used to implement polymorphism.",
      "C": "Inheritance is a type of encapsulation.",
      "D": "All of the above"
    },
    "correct_answer": "D",
    "difficulty": "intermediate",
    "topic": "Inheritance"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    for (int i = 0; i < v.size(); i++) {\n        cout << v[i] << \" \";\n    }\n    return 0;\n}",
    "options": {
      "A": "1 2 3 4 5",
      "B": "0 1 2 3 4",
      "C": "1 2 3 4",
      "D": "Compilation Error"
    },
    "correct_answer": "A",
    "difficulty": "easy",
    "topic": "STL"
  },
  {
    "question": "Which of the following correctly describes operator overloading in C++?",
    "code": "",
    "options": {
      "A": "Operator overloading allows defining a new operator in the language.",
      "B": "Operator overloading allows defining custom behavior for existing operators.",
      "C": "Operator overloading allows operators to have more than two operands.",
      "D": "Operator overloading is not supported in C++."
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Operator Overloading"
  },
  {
    "question": "What is the size of a pointer on a 64-bit system?",
    "code": "",
    "options": {
      "A": "2 bytes",
      "B": "4 bytes",
      "C": "8 bytes",
      "D": "16 bytes"
    },
    "correct_answer": "C",
    "difficulty": "easy",
    "topic": "Data Types"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int x = 5, y = 10;\n    auto lambda = [x, &y]() mutable { x = 20; y = 20; };\n    lambda();\n    cout << x << \" \" << y;\n    return 0;\n}",
    "options": {
      "A": "5 10",
      "B": "5 20",
      "C": "20 20",
      "D": "20 10"
    },
    "correct_answer": "B",
    "difficulty": "hard",
    "topic": "Lambda Expressions"
  },
  {
    "question": "Which of the following statements about 'std::vector' is correct?",
    "code": "",
    "options": {
      "A": "std::vector is a sequence container that encapsulates dynamic size arrays.",
      "B": "std::vector does not allow direct access to elements.",
      "C": "std::vector cannot be resized once initialized.",
      "D": "std::vector elements are stored in a linked list."
    },
    "correct_answer": "A",
    "difficulty": "intermediate",
    "topic": "STL"
  },
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nclass Base {\npublic:\n    virtual ~Base() {\n        cout << \"Base destructor\";\n    }\n};\nclass Derived : public Base {\npublic:\n    ~Derived() {\n        cout << \"Derived destructor\";\n    }\n};\nint main() {\n    Base* b = new Derived();\n    delete b;\n    return 0;\n}",
    "options": {
      "A": "Base destructorDerived destructor",
      "B": "Derived destructorBase destructor",
      "C": "Base destructor",
      "D": "Derived destructor"
    },
    "correct_answer": "B",
    "difficulty": "intermediate",
    "topic": "Polymorphism"
  },
  {
    "question": "What is the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nint main() {\n    int x = 10;\n    int y = 20;\n    int* ptr = &x;\n    *ptr = 30;\n    ptr = &y;\n    *ptr = 40;\n    cout << x << \" \" << y;\n    return 0;\n}",
    "options": {
      "A": "10 20",
      "B": "30 40",
      "C": "30 20",
      "D": "10 40"
    },
    "correct_answer": "B",
    "difficulty": "easy",
    "topic": "Pointers"
  },
  {
    "question": "Which of the following is true about virtual functions in C++?",
    "code": "",
    "options": {
      "A": "A virtual function can be overridden in a derived class.",
      "B": "A virtual function cannot have a body.",
      "C": "A virtual function is defined using the 'virtual' keyword and must be implemented in the base class.",
      "D": "A virtual function is automatically final and cannot be overridden further."
    },
    "correct_answer": "A",
    "difficulty": "intermediate",
    "topic": "Virtual Functions"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nint main() {\n    string s1 = \"Hello\";\n    string s2 = \"World\";\n    string s3 = s1 + \" \" + s2;\n    cout << s3;\n    return 0;\n}",
    "options": {
      "A": "HelloWorld",
      "B": "Hello World",
      "C": "Hello",
      "D": "World"
    },
    "correct_answer": "B",
    "difficulty": "easy",
    "topic": "Strings"
  },
  {
    "question": "Which of the following statements about 'std::map' in C++ is correct?",
    "code": "",
    "options": {
      "A": "std::map stores elements in a hash table.",
      "B": "std::map is a sequence container.",
      "C": "std::map does not allow duplicate keys.",
      "D": "std::map elements are not ordered."
    },
    "correct_answer": "C",
    "difficulty": "intermediate",
    "topic": "STL"
  },
  {
    "question": "What will be the output of the following code?",
    "code": "#include <iostream>\nusing namespace std;\nclass A {\npublic:\n    A() { cout << \"A\"; }\n    ~A() { cout << \"~A\"; }\n};\nclass B {\npublic:\n    B() { cout << \"B\"; }\n    ~B() { cout << \"~B\"; }\n};\nint main() {\n    A a;\n    B b;\n    return 0;\n}",
    "options": {
      "A": "AB~A~B",
      "B": "BA~A~B",
      "C": "AB~B~A",
      "D": "BA~B~A"
    },
    "correct_answer": "C",
    "difficulty": "intermediate",
    "topic": "Constructors and Destructors"
  }
]